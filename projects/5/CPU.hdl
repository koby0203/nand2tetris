// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // ARegister入出力
    // ★出力：addressM
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inARegister);
    Not(in=instruction[15], out=isAInstruction);
    And(a=instruction[15], b=instruction[5], out=writeA);
    Or(a=isAInstruction, b=writeA, out=loadAReister);
    ARegister(in=inARegister, load=loadAReister, out=outARegister, out[0..14]=addressM);

    // DRegister入出力
    And(a=instruction[15], b=instruction[4], out=loadDRegister);
    DRegister(in=outALU, load=loadDRegister, out=outDRegister);

    // ★出力：outM
    Mux16(a=outARegister, b=inM, sel=instruction[12], out=inAluAorM);
    ALU(x=outDRegister, y=inAluAorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outALU, zr=zr, ng=ng);

    // ★出力：writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    // ★出力：pc
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    /// If out > 0 jump
    And(a=notzr, b=notng, out=gt);
    And(a=instruction[0], b=gt, out=jgt);
    /// If out = 0 jump
    And(a=instruction[1], b=zr, out=jeq);
    /// If out >= 0 jump
    Or(a=jgt, b=jeq, out=jge);
    /// If out < 0 jump
    And(a=instruction[2], b=ng, out=jlt);
    /// If out <> 0 jump
    And(a=instruction[0], b=instruction[2], out=j1andj3);
    And(a=j1andj3, b=notzr, out=jne);
    /// If out <= 0 jump
    Or(a=jlt, b=jeq, out=jle);
    /// Jump
    And(a=instruction[0], b=instruction[1], out=tempjump);
    And(a=tempjump, b=instruction[2], out=jmp);

    Or8Way(in[0]=jgt, in[1]=jeq, in[2]=jge, in[3]=jlt, in[4]=jne, in[5]=jle, in[6]=jmp, in[7]=false, out=isJump);
    And(a=instruction[15], b=isJump, out=loadPC);
    PC(in=outARegister, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}