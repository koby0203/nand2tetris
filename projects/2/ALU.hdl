// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0
    PARTS:
    // x変換
    Zero16(a=x, z=zx, out=tempx);
    Negate16(a=tempx, n=nx, out=resultx);

    // y変換
    Zero16(a=y, z=zy, out=tempy);
    Negate16(a=tempy, n=ny, out=resulty);

    // x and y
    And16(a=resultx, b=resulty, out=xandy);

    // x + y
    Add16(a=resultx, b=resulty, out=xplusy);

    // out
    Mux16(a=xandy, b=xplusy, sel=f, out=tempout);
    Negate16(a=tempout, n=no, out=out, out=anotherout, out[15]=topbit);

    // zr
    Not16(in=anotherout, out[0]=notout0, out[1]=notout1, out[2]=notout2, out[3]=notout3, out[4]=notout4, out[5]=notout5, out[6]=notout6, out[7]=notout7, out[8]=notout8, out[9]=notout9, out[10]=notout10, out[11]=notout11, out[12]=notout12, out[13]=notout13, out[14]=notout14, out[15]=notout15);

    And(a=notout0, b=notout1, out=andout1);
    And(a=notout2, b=notout3, out=andout2);
    And(a=notout4, b=notout5, out=andout3);
    And(a=notout6, b=notout7, out=andout4);
    And(a=notout8, b=notout9, out=andout5);
    And(a=notout10, b=notout11, out=andout6);
    And(a=notout12, b=notout13, out=andout7);
    And(a=notout14, b=notout15, out=andout8);

    And(a=andout1, b=andout2, out=andout9);
    And(a=andout3, b=andout4, out=andout10);
    And(a=andout5, b=andout6, out=andout11);
    And(a=andout7, b=andout8, out=andout12);
  
    And(a=andout9, b=andout10, out=andout13);
    And(a=andout11, b=andout12, out=andout14);

    And(a=andout13, b=andout14, out=zr, out=anotherzr);

    // ng
    Not(in=topbit, out=nottopbit);
    Not(in=anotherzr, out=notzr);
    And(a=topbit, b=notzr, out=ng);
}